# coding: utf-8

"""
    docstore API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@docstore.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docstore_python_client.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'uuid': 'str',
        'title': 'str',
        'content': 'str',
        'latest_change': 'datetime',
        'latest_update': 'datetime',
        'space': 'Space',
        'environment': 'Environment',
        'other_environments': 'list[Environment]',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'title': 'title',
        'content': 'content',
        'latest_change': 'latestChange',
        'latest_update': 'latestUpdate',
        'space': 'space',
        'environment': 'environment',
        'other_environments': 'otherEnvironments',
        'tags': 'tags'
    }

    def __init__(self, id=None, uuid=None, title=None, content=None, latest_change=None, latest_update=None, space=None, environment=None, other_environments=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """Document - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._uuid = None
        self._title = None
        self._content = None
        self._latest_change = None
        self._latest_update = None
        self._space = None
        self._environment = None
        self._other_environments = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.uuid = uuid
        self.title = title
        self.content = content
        if latest_change is not None:
            self.latest_change = latest_change
        self.latest_update = latest_update
        self.space = space
        self.environment = environment
        self.other_environments = other_environments
        self.tags = tags

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this Document.  # noqa: E501


        :return: The uuid of this Document.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Document.


        :param uuid: The uuid of this Document.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def title(self):
        """Gets the title of this Document.  # noqa: E501


        :return: The title of this Document.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Document.


        :param title: The title of this Document.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def content(self):
        """Gets the content of this Document.  # noqa: E501


        :return: The content of this Document.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Document.


        :param content: The content of this Document.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def latest_change(self):
        """Gets the latest_change of this Document.  # noqa: E501


        :return: The latest_change of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_change

    @latest_change.setter
    def latest_change(self, latest_change):
        """Sets the latest_change of this Document.


        :param latest_change: The latest_change of this Document.  # noqa: E501
        :type: datetime
        """

        self._latest_change = latest_change

    @property
    def latest_update(self):
        """Gets the latest_update of this Document.  # noqa: E501


        :return: The latest_update of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_update

    @latest_update.setter
    def latest_update(self, latest_update):
        """Sets the latest_update of this Document.


        :param latest_update: The latest_update of this Document.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and latest_update is None:  # noqa: E501
            raise ValueError("Invalid value for `latest_update`, must not be `None`")  # noqa: E501

        self._latest_update = latest_update

    @property
    def space(self):
        """Gets the space of this Document.  # noqa: E501


        :return: The space of this Document.  # noqa: E501
        :rtype: Space
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this Document.


        :param space: The space of this Document.  # noqa: E501
        :type: Space
        """
        if self.local_vars_configuration.client_side_validation and space is None:  # noqa: E501
            raise ValueError("Invalid value for `space`, must not be `None`")  # noqa: E501

        self._space = space

    @property
    def environment(self):
        """Gets the environment of this Document.  # noqa: E501


        :return: The environment of this Document.  # noqa: E501
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Document.


        :param environment: The environment of this Document.  # noqa: E501
        :type: Environment
        """
        if self.local_vars_configuration.client_side_validation and environment is None:  # noqa: E501
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def other_environments(self):
        """Gets the other_environments of this Document.  # noqa: E501


        :return: The other_environments of this Document.  # noqa: E501
        :rtype: list[Environment]
        """
        return self._other_environments

    @other_environments.setter
    def other_environments(self, other_environments):
        """Sets the other_environments of this Document.


        :param other_environments: The other_environments of this Document.  # noqa: E501
        :type: list[Environment]
        """
        if self.local_vars_configuration.client_side_validation and other_environments is None:  # noqa: E501
            raise ValueError("Invalid value for `other_environments`, must not be `None`")  # noqa: E501

        self._other_environments = other_environments

    @property
    def tags(self):
        """Gets the tags of this Document.  # noqa: E501


        :return: The tags of this Document.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Document.


        :param tags: The tags of this Document.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
