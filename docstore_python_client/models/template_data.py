# coding: utf-8

"""
    docstore API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: contact@docstore.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from docstore_python_client.configuration import Configuration


class TemplateData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuid': 'str',
        'space': 'Space',
        'environment': 'Environment',
        'additional_tags': 'list[str]',
        'variables': 'list[TemplateVariable]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'space': 'space',
        'environment': 'environment',
        'additional_tags': 'additionalTags',
        'variables': 'variables'
    }

    def __init__(self, uuid=None, space=None, environment=None, additional_tags=None, variables=None, local_vars_configuration=None):  # noqa: E501
        """TemplateData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uuid = None
        self._space = None
        self._environment = None
        self._additional_tags = None
        self._variables = None
        self.discriminator = None

        self.uuid = uuid
        self.space = space
        if environment is not None:
            self.environment = environment
        if additional_tags is not None:
            self.additional_tags = additional_tags
        self.variables = variables

    @property
    def uuid(self):
        """Gets the uuid of this TemplateData.  # noqa: E501


        :return: The uuid of this TemplateData.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TemplateData.


        :param uuid: The uuid of this TemplateData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uuid is None:  # noqa: E501
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def space(self):
        """Gets the space of this TemplateData.  # noqa: E501


        :return: The space of this TemplateData.  # noqa: E501
        :rtype: Space
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this TemplateData.


        :param space: The space of this TemplateData.  # noqa: E501
        :type: Space
        """
        if self.local_vars_configuration.client_side_validation and space is None:  # noqa: E501
            raise ValueError("Invalid value for `space`, must not be `None`")  # noqa: E501

        self._space = space

    @property
    def environment(self):
        """Gets the environment of this TemplateData.  # noqa: E501


        :return: The environment of this TemplateData.  # noqa: E501
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this TemplateData.


        :param environment: The environment of this TemplateData.  # noqa: E501
        :type: Environment
        """

        self._environment = environment

    @property
    def additional_tags(self):
        """Gets the additional_tags of this TemplateData.  # noqa: E501


        :return: The additional_tags of this TemplateData.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_tags

    @additional_tags.setter
    def additional_tags(self, additional_tags):
        """Sets the additional_tags of this TemplateData.


        :param additional_tags: The additional_tags of this TemplateData.  # noqa: E501
        :type: list[str]
        """

        self._additional_tags = additional_tags

    @property
    def variables(self):
        """Gets the variables of this TemplateData.  # noqa: E501


        :return: The variables of this TemplateData.  # noqa: E501
        :rtype: list[TemplateVariable]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this TemplateData.


        :param variables: The variables of this TemplateData.  # noqa: E501
        :type: list[TemplateVariable]
        """
        if self.local_vars_configuration.client_side_validation and variables is None:  # noqa: E501
            raise ValueError("Invalid value for `variables`, must not be `None`")  # noqa: E501

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplateData):
            return True

        return self.to_dict() != other.to_dict()
